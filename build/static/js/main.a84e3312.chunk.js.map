{"version":3,"sources":["components/ResipeItem.js","redux/actions.js","components/RecipeList.js","redux/reducers.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","console","log","react_default","a","createElement","onClick","className","title","Types","CREATE_RECIPE","GET_RECIPES","DELETE_RECIPE","actions","createRecipe","recipe","dispatch","fetch","method","headers","Content-type","then","res","send","status","type","payload","catch","err","getResipes","json","recipes","deleteRecipe","id","recipeList","this","_this","_this$props$recipes","recipes","map","ResipeItem","goToDetails","React","Component","connect","state","defaultState","todoReducer","arguments","length","undefined","action","ACTIONS","newRecipe","newState","_","cloneDeep","push","GET_RECIPE","_objectSpread","index","findIndex","splice","middleware","thunk","store","createStore","rootReducer","applyMiddleware","apply","App","es","RecipeList","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","react_router_dom","react_router","exact","path","component","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yQAaeA,MAXf,SAAgBC,GAEZ,OADAC,QAAQC,IAAI,QAASF,GAElBG,EAAAC,EAAAC,cAAA,OAAKC,QAAS,kBAAMN,EAAMM,QAAQN,IAC7BO,UAAU,oBACbJ,EAAAC,EAAAC,cAAA,UAAKL,EAAMQ,iBCPdC,EAAQ,CACVC,cAAe,gBACfC,YAAa,cACbC,cAAe,iBA2CFC,EAAA,CACbC,aAzCmB,SAAAC,GAAM,OAAI,SAAAC,GAC7Bf,QAAQC,IAAI,SAAUa,GACtBE,MAAK,gCAAkC,CACrCC,OAAQ,OACRC,QAAS,CACPC,eAAgB,yBAGnBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,KAAKR,GAAQS,OAAO,OACpCH,KAAK,SAAAC,GAAG,OAAIN,EAAS,CACpBS,KAAMhB,EAAMC,cACZgB,QAASX,MAEVY,MAAM,SAAAC,GACH3B,QAAQC,IAAI0B,OA4BhBC,WAxBiB,kBAAM,SAAAb,GACvBC,MAAK,gCAAkC,CACrCC,OAAQ,MACRC,QAAS,CACPC,eAAgB,sBAGnBC,KAAK,SAAAC,GAAG,OAAIA,EAAIQ,SAChBT,KAAK,SAAAC,GAAG,OAAIN,EAAS,CACpBS,KAAMhB,EAAME,YACZe,QAAS,CAAEK,SAAUT,OAEtBK,MAAM,SAAAC,GACH3B,QAAQC,IAAI0B,OAYhBI,aARmB,SAAAC,GAAE,MAAK,CAC1BR,KAAMhB,EAAMG,cACZc,QAASO,IAOTxB,SC7CEyB,8LAEFC,KAAKnC,MAAMgB,SAASa,sCAEb,IAAAO,EAAAD,KAAAE,EACkBF,KAAKnC,MAAtBsC,eADD,IAAAD,EACW,GADXA,EAGP,OADApC,QAAQC,IAAI,aAAciC,KAAKnC,OAE3BG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAf,UAEEJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACZ+B,EAAQC,IAAI,SAAAxB,GAAM,OACjBZ,EAAAC,EAAAC,cAACmC,EAAD,CACEhC,MAAOO,EAAOP,MACdiC,YAAaL,EAAKK,yBAdTC,IAAMC,WA4BhBC,cAJS,SAAAC,GAAK,MAAK,CAChCP,QAASO,EAAMP,UAGFM,CAAyBV,wQC9BxC,IAAMY,EAAe,CACnBR,QAAS,IAgCIS,EA7BK,WAAkC,IAAjCF,EAAiCG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAO1B,MACb,KAAK2B,EAAQ3C,MAAMC,cACjBT,QAAQC,IAAIiD,GACZ,IAAIE,EAAYF,EAAOzB,QACnB4B,EAAWC,IAAEC,UAAUX,GAE3B,OADAS,EAAShB,QAAQmB,KAAKJ,GACfC,EAGT,KAAKF,EAAQ3C,MAAMiD,WACjB,4VAAAC,CAAA,GACKd,EADL,CAEEP,QAASa,EAAOzB,UAIpB,KAAK0B,EAAQ3C,MAAMG,cACjB,IAAI0C,EAAWC,IAAEC,UAAUX,GACvBe,EAAQL,IAAEM,UAAUP,EAAShB,QAAS,CAAEL,GAAIkB,EAAOzB,UAEvD,OADA4B,EAAShB,QAAQwB,OAAOF,EAAO,GACxBN,EAGT,QACE,OAAOT,IC1BPkB,EAAa,CAACC,KAILC,EAFDC,YAAYC,EAJL,GAIgCC,IAAeC,WAAf,EAAmBN,ICUzDO,mLAVX,OACEnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,CAAUN,MAAOA,GACf9D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACmE,EAAD,eALQ9B,IAAMC,WCMJ8B,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECAR,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO/E,EAAAC,EAAAC,cAXhB,WACE,OACEF,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,KACEhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACEjF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWjB,OAOjC,MAAqBQ,GD8G7B,kBAAmBU,WACrBA,UAAUC,cAAcC,MAAMrE,KAAK,SAAAsE,GACjCA,EAAaC","file":"static/js/main.a84e3312.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Recipe(props) {\n    console.log(\"props\", props)\n    return (\n       <div onClick={() => props.onClick(props)}\n            className=\"container-recipe\">\n         <h1>{props.title}</h1>\n       </div>\n    );\n  }\n\n\nexport default Recipe;","const Types = {\n    CREATE_RECIPE: \"CREATE_RECIPE\",\n    GET_RECIPES: \"GET_RECIPES\",\n    DELETE_RECIPE: \"DELETE_RECIPE\"\n  };\n  \n  const createRecipe = recipe => dispatch => {\n    console.log(\"recipe\", recipe)\n    fetch(`http://localhost:3000/recipes`, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'multipart/form-data'\n      },\n    })\n    .then(res => res.send(recipe).status(200))\n    .then(res => dispatch({\n      type: Types.CREATE_RECIPE,\n      payload: recipe\n    }))\n    .catch(err => {\n        console.log(err)\n    })\n  }\n  \n  const getResipes = () => dispatch => {\n    fetch(`http://localhost:3000/recipes`, {\n      method: 'GET',\n      headers: {\n        'Content-type': 'application/json'\n      },\n    })\n    .then(res => res.json())\n    .then(res => dispatch({\n      type: Types.GET_RECIPES,\n      payload: { recipes: res },\n    }))\n    .catch(err => {\n        console.log(err)\n    })\n  }\n\n  const deleteRecipe = id => ({\n    type: Types.DELETE_RECIPE,\n    payload: id\n  });\n  \n  export default {\n    createRecipe,\n    getResipes,\n    deleteRecipe,\n    Types\n  };\n","import React from 'react';\nimport ResipeItem from './ResipeItem';\nimport { connect } from 'react-redux';\nimport getResipes from '../redux/actions.js';\n\nclass recipeList extends React.Component {\n  componentDidMount() {\n    this.props.dispatch(getResipes());\n  }\n  render() {\n    const { recipes = [] } = this.props;\n    console.log('this.props', this.props)\n    return (\n        <div className=\"App\">\n            Resipes\n          <div className=\"grid-container\">\n            {recipes.map(recipe => (\n              <ResipeItem\n                title={recipe.title}\n                goToDetails={this.goToDetails}\n              />\n            ))\n            }\n          </div>\n        </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  recipes: state.recipes,\n});\n\nexport default connect(mapStateToProps)(recipeList);","import ACTIONS from \"./actions\";\nimport _ from \"lodash\";\n\nconst defaultState = {\n  recipes: []\n};\n\nconst todoReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case ACTIONS.Types.CREATE_RECIPE: {\n      console.log(action);\n      let newRecipe = action.payload\n      let newState = _.cloneDeep(state);\n      newState.recipes.push(newRecipe);\n      return newState;\n    }\n\n    case ACTIONS.Types.GET_RECIPE: {\n      return {\n        ...state,\n        recipes: action.payload\n      }\n    }\n\n    case ACTIONS.Types.DELETE_RECIPE: {\n      let newState = _.cloneDeep(state);\n      let index = _.findIndex(newState.recipes, { id: action.payload });\n      newState.recipes.splice(index, 1);\n      return newState;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleware));\n\nexport default store;\n","import React from 'react';\nimport './App.css';\nimport RecipeList from './components/RecipeList.js'\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <RecipeList />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n\nfunction RouterComponent() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/recipes\" component={App} />\n      </Switch>\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<RouterComponent />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}